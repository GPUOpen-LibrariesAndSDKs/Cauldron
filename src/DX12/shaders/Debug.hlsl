// AMD Cauldron code
// 
// Copyright(c) 2024 Advanced Micro Devices, Inc.All rights reserved.
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//--------------------------------------------------------------------------------------
// Constant Buffer
//--------------------------------------------------------------------------------------
cbuffer cbPerFrame : register(b0)
{
    bool showBins;
}

//--------------------------------------------------------------------------------------
// I/O Structures
//--------------------------------------------------------------------------------------

struct VERTEX
{
    float2 vTexcoord : TEXCOORD;
};

//--------------------------------------------------------------------------------------
// Texture definitions
//--------------------------------------------------------------------------------------

Texture2D<uint4> DebugBuffer  : register(t0);
SamplerState     DebugSampler : register(s0);

//--------------------------------------------------------------------------------------
// Main function
//--------------------------------------------------------------------------------------

#define	PaletteCount	256
static const float4 PaletteColors[PaletteCount] =
{
    float4(255 * 0.492325f, 255 * 0.090787f, 255 * 0.000076f, 255 * 1.0f),
    float4(255 * 0.496730f, 255 * 0.102802f, 255 * 0.003675f, 255 * 1.0f),
    float4(255 * 0.501125f, 255 * 0.114034f, 255 * 0.007134f, 255 * 1.0f),
    float4(255 * 0.505473f, 255 * 0.124685f, 255 * 0.010421f, 255 * 1.0f),
    float4(255 * 0.509813f, 255 * 0.134890f, 255 * 0.013817f, 255 * 1.0f),
    float4(255 * 0.514125f, 255 * 0.144643f, 255 * 0.016841f, 255 * 1.0f),
    float4(255 * 0.518397f, 255 * 0.154036f, 255 * 0.019720f, 255 * 1.0f),
    float4(255 * 0.522634f, 255 * 0.163193f, 255 * 0.022451f, 255 * 1.0f),
    float4(255 * 0.526850f, 255 * 0.172041f, 255 * 0.025034f, 255 * 1.0f),
    float4(255 * 0.531016f, 255 * 0.180682f, 255 * 0.027528f, 255 * 1.0f),
    float4(255 * 0.535142f, 255 * 0.189147f, 255 * 0.030132f, 255 * 1.0f),
    float4(255 * 0.539225f, 255 * 0.197418f, 255 * 0.032869f, 255 * 1.0f),
    float4(255 * 0.543266f, 255 * 0.205524f, 255 * 0.035925f, 255 * 1.0f),
    float4(255 * 0.547254f, 255 * 0.213477f, 255 * 0.038888f, 255 * 1.0f),
    float4(255 * 0.551203f, 255 * 0.221318f, 255 * 0.041994f, 255 * 1.0f),
    float4(255 * 0.555100f, 255 * 0.229015f, 255 * 0.045012f, 255 * 1.0f),
    float4(255 * 0.558954f, 255 * 0.236607f, 255 * 0.047967f, 255 * 1.0f),
    float4(255 * 0.562776f, 255 * 0.244053f, 255 * 0.051012f, 255 * 1.0f),
    float4(255 * 0.566540f, 255 * 0.251456f, 255 * 0.053998f, 255 * 1.0f),
    float4(255 * 0.570257f, 255 * 0.258727f, 255 * 0.057033f, 255 * 1.0f),
    float4(255 * 0.573940f, 255 * 0.265922f, 255 * 0.060051f, 255 * 1.0f),
    float4(255 * 0.577577f, 255 * 0.273024f, 255 * 0.063001f, 255 * 1.0f),
    float4(255 * 0.581178f, 255 * 0.280048f, 255 * 0.065873f, 255 * 1.0f),
    float4(255 * 0.584739f, 255 * 0.286993f, 255 * 0.068856f, 255 * 1.0f),
    float4(255 * 0.588249f, 255 * 0.293880f, 255 * 0.071712f, 255 * 1.0f),
    float4(255 * 0.591737f, 255 * 0.300697f, 255 * 0.074564f, 255 * 1.0f),
    float4(255 * 0.595174f, 255 * 0.307450f, 255 * 0.077376f, 255 * 1.0f),
    float4(255 * 0.598577f, 255 * 0.314151f, 255 * 0.080252f, 255 * 1.0f),
    float4(255 * 0.601948f, 255 * 0.320797f, 255 * 0.083076f, 255 * 1.0f),
    float4(255 * 0.605282f, 255 * 0.327364f, 255 * 0.085853f, 255 * 1.0f),
    float4(255 * 0.608593f, 255 * 0.333908f, 255 * 0.088711f, 255 * 1.0f),
    float4(255 * 0.611855f, 255 * 0.340387f, 255 * 0.091525f, 255 * 1.0f),
    float4(255 * 0.615092f, 255 * 0.346826f, 255 * 0.094279f, 255 * 1.0f),
    float4(255 * 0.618309f, 255 * 0.353217f, 255 * 0.096979f, 255 * 1.0f),
    float4(255 * 0.621487f, 255 * 0.359572f, 255 * 0.099753f, 255 * 1.0f),
    float4(255 * 0.624650f, 255 * 0.365896f, 255 * 0.102506f, 255 * 1.0f),
    float4(255 * 0.627785f, 255 * 0.372174f, 255 * 0.105218f, 255 * 1.0f),
    float4(255 * 0.630901f, 255 * 0.378439f, 255 * 0.107956f, 255 * 1.0f),
    float4(255 * 0.633994f, 255 * 0.384670f, 255 * 0.110736f, 255 * 1.0f),
    float4(255 * 0.637068f, 255 * 0.390894f, 255 * 0.113480f, 255 * 1.0f),
    float4(255 * 0.640129f, 255 * 0.397078f, 255 * 0.116219f, 255 * 1.0f),
    float4(255 * 0.643171f, 255 * 0.403273f, 255 * 0.118960f, 255 * 1.0f),
    float4(255 * 0.646208f, 255 * 0.409445f, 255 * 0.121674f, 255 * 1.0f),
    float4(255 * 0.649242f, 255 * 0.415612f, 255 * 0.124470f, 255 * 1.0f),
    float4(255 * 0.652261f, 255 * 0.421776f, 255 * 0.127267f, 255 * 1.0f),
    float4(255 * 0.655276f, 255 * 0.427961f, 255 * 0.130152f, 255 * 1.0f),
    float4(255 * 0.658297f, 255 * 0.434132f, 255 * 0.132974f, 255 * 1.0f),
    float4(255 * 0.661315f, 255 * 0.440331f, 255 * 0.135825f, 255 * 1.0f),
    float4(255 * 0.664334f, 255 * 0.446543f, 255 * 0.138777f, 255 * 1.0f),
    float4(255 * 0.667364f, 255 * 0.452780f, 255 * 0.141759f, 255 * 1.0f),
    float4(255 * 0.670402f, 255 * 0.459031f, 255 * 0.144786f, 255 * 1.0f),
    float4(255 * 0.673440f, 255 * 0.465303f, 255 * 0.147848f, 255 * 1.0f),
    float4(255 * 0.676494f, 255 * 0.471628f, 255 * 0.150966f, 255 * 1.0f),
    float4(255 * 0.679554f, 255 * 0.477967f, 255 * 0.154160f, 255 * 1.0f),
    float4(255 * 0.682637f, 255 * 0.484345f, 255 * 0.157428f, 255 * 1.0f),
    float4(255 * 0.685735f, 255 * 0.490782f, 255 * 0.160789f, 255 * 1.0f),
    float4(255 * 0.688849f, 255 * 0.497239f, 255 * 0.164248f, 255 * 1.0f),
    float4(255 * 0.691977f, 255 * 0.503744f, 255 * 0.167748f, 255 * 1.0f),
    float4(255 * 0.695120f, 255 * 0.510297f, 255 * 0.171371f, 255 * 1.0f),
    float4(255 * 0.698285f, 255 * 0.516904f, 255 * 0.175115f, 255 * 1.0f),
    float4(255 * 0.701472f, 255 * 0.523556f, 255 * 0.178956f, 255 * 1.0f),
    float4(255 * 0.704681f, 255 * 0.530258f, 255 * 0.182899f, 255 * 1.0f),
    float4(255 * 0.707908f, 255 * 0.537021f, 255 * 0.187010f, 255 * 1.0f),
    float4(255 * 0.711162f, 255 * 0.543825f, 255 * 0.191228f, 255 * 1.0f),
    float4(255 * 0.714426f, 255 * 0.550692f, 255 * 0.195605f, 255 * 1.0f),
    float4(255 * 0.717725f, 255 * 0.557617f, 255 * 0.200115f, 255 * 1.0f),
    float4(255 * 0.721030f, 255 * 0.564592f, 255 * 0.204829f, 255 * 1.0f),
    float4(255 * 0.724366f, 255 * 0.571630f, 255 * 0.209678f, 255 * 1.0f),
    float4(255 * 0.727717f, 255 * 0.578727f, 255 * 0.214708f, 255 * 1.0f),
    float4(255 * 0.731087f, 255 * 0.585886f, 255 * 0.219946f, 255 * 1.0f),
    float4(255 * 0.734480f, 255 * 0.593098f, 255 * 0.225346f, 255 * 1.0f),
    float4(255 * 0.737879f, 255 * 0.600364f, 255 * 0.230969f, 255 * 1.0f),
    float4(255 * 0.741297f, 255 * 0.607699f, 255 * 0.236808f, 255 * 1.0f),
    float4(255 * 0.744731f, 255 * 0.615074f, 255 * 0.242822f, 255 * 1.0f),
    float4(255 * 0.748175f, 255 * 0.622516f, 255 * 0.249103f, 255 * 1.0f),
    float4(255 * 0.751624f, 255 * 0.630013f, 255 * 0.255599f, 255 * 1.0f),
    float4(255 * 0.755074f, 255 * 0.637558f, 255 * 0.262334f, 255 * 1.0f),
    float4(255 * 0.758523f, 255 * 0.645147f, 255 * 0.269325f, 255 * 1.0f),
    float4(255 * 0.761963f, 255 * 0.652786f, 255 * 0.276547f, 255 * 1.0f),
    float4(255 * 0.765406f, 255 * 0.660470f, 255 * 0.284010f, 255 * 1.0f),
    float4(255 * 0.768820f, 255 * 0.668197f, 255 * 0.291755f, 255 * 1.0f),
    float4(255 * 0.772224f, 255 * 0.675947f, 255 * 0.299742f, 255 * 1.0f),
    float4(255 * 0.775598f, 255 * 0.683727f, 255 * 0.307981f, 255 * 1.0f),
    float4(255 * 0.778939f, 255 * 0.691534f, 255 * 0.316505f, 255 * 1.0f),
    float4(255 * 0.782242f, 255 * 0.699353f, 255 * 0.325257f, 255 * 1.0f),
    float4(255 * 0.785493f, 255 * 0.707188f, 255 * 0.334299f, 255 * 1.0f),
    float4(255 * 0.788687f, 255 * 0.715019f, 255 * 0.343564f, 255 * 1.0f),
    float4(255 * 0.791812f, 255 * 0.722841f, 255 * 0.353091f, 255 * 1.0f),
    float4(255 * 0.794864f, 255 * 0.730654f, 255 * 0.362848f, 255 * 1.0f),
    float4(255 * 0.797828f, 255 * 0.738438f, 255 * 0.372842f, 255 * 1.0f),
    float4(255 * 0.800699f, 255 * 0.746187f, 255 * 0.383072f, 255 * 1.0f),
    float4(255 * 0.803461f, 255 * 0.753893f, 255 * 0.393496f, 255 * 1.0f),
    float4(255 * 0.806107f, 255 * 0.761537f, 255 * 0.404131f, 255 * 1.0f),
    float4(255 * 0.808624f, 255 * 0.769113f, 255 * 0.414950f, 255 * 1.0f),
    float4(255 * 0.810997f, 255 * 0.776617f, 255 * 0.425936f, 255 * 1.0f),
    float4(255 * 0.813218f, 255 * 0.784025f, 255 * 0.437088f, 255 * 1.0f),
    float4(255 * 0.815281f, 255 * 0.791322f, 255 * 0.448363f, 255 * 1.0f),
    float4(255 * 0.817167f, 255 * 0.798508f, 255 * 0.459757f, 255 * 1.0f),
    float4(255 * 0.818865f, 255 * 0.805562f, 255 * 0.471253f, 255 * 1.0f),
    float4(255 * 0.820371f, 255 * 0.812478f, 255 * 0.482813f, 255 * 1.0f),
    float4(255 * 0.821675f, 255 * 0.819240f, 255 * 0.494440f, 255 * 1.0f),
    float4(255 * 0.822757f, 255 * 0.825842f, 255 * 0.506080f, 255 * 1.0f),
    float4(255 * 0.823613f, 255 * 0.832270f, 255 * 0.517753f, 255 * 1.0f),
    float4(255 * 0.824237f, 255 * 0.838506f, 255 * 0.529400f, 255 * 1.0f),
    float4(255 * 0.824620f, 255 * 0.844553f, 255 * 0.541003f, 255 * 1.0f),
    float4(255 * 0.824755f, 255 * 0.850392f, 255 * 0.552561f, 255 * 1.0f),
    float4(255 * 0.824634f, 255 * 0.856022f, 255 * 0.564037f, 255 * 1.0f),
    float4(255 * 0.824253f, 255 * 0.861429f, 255 * 0.575407f, 255 * 1.0f),
    float4(255 * 0.823606f, 255 * 0.866611f, 255 * 0.586656f, 255 * 1.0f),
    float4(255 * 0.822692f, 255 * 0.871564f, 255 * 0.597769f, 255 * 1.0f),
    float4(255 * 0.821502f, 255 * 0.876273f, 255 * 0.608734f, 255 * 1.0f),
    float4(255 * 0.820031f, 255 * 0.880744f, 255 * 0.619513f, 255 * 1.0f),
    float4(255 * 0.818285f, 255 * 0.884972f, 255 * 0.630101f, 255 * 1.0f),
    float4(255 * 0.816266f, 255 * 0.888952f, 255 * 0.640490f, 255 * 1.0f),
    float4(255 * 0.813955f, 255 * 0.892681f, 255 * 0.650660f, 255 * 1.0f),
    float4(255 * 0.811371f, 255 * 0.896160f, 255 * 0.660600f, 255 * 1.0f),
    float4(255 * 0.808502f, 255 * 0.899389f, 255 * 0.670314f, 255 * 1.0f),
    float4(255 * 0.805347f, 255 * 0.902364f, 255 * 0.679761f, 255 * 1.0f),
    float4(255 * 0.801918f, 255 * 0.905092f, 255 * 0.688973f, 255 * 1.0f),
    float4(255 * 0.798210f, 255 * 0.907568f, 255 * 0.697906f, 255 * 1.0f),
    float4(255 * 0.794228f, 255 * 0.909794f, 255 * 0.706586f, 255 * 1.0f),
    float4(255 * 0.789963f, 255 * 0.911771f, 255 * 0.714983f, 255 * 1.0f),
    float4(255 * 0.785431f, 255 * 0.913506f, 255 * 0.723105f, 255 * 1.0f),
    float4(255 * 0.780623f, 255 * 0.914991f, 255 * 0.730953f, 255 * 1.0f),
    float4(255 * 0.775551f, 255 * 0.916237f, 255 * 0.738521f, 255 * 1.0f),
    float4(255 * 0.770217f, 255 * 0.917249f, 255 * 0.745803f, 255 * 1.0f),
    float4(255 * 0.764624f, 255 * 0.918014f, 255 * 0.752800f, 255 * 1.0f),
    float4(255 * 0.758773f, 255 * 0.918542f, 255 * 0.759517f, 255 * 1.0f),
    float4(255 * 0.752665f, 255 * 0.918838f, 255 * 0.765957f, 255 * 1.0f),
    float4(255 * 0.746318f, 255 * 0.918903f, 255 * 0.772108f, 255 * 1.0f),
    float4(255 * 0.739731f, 255 * 0.918739f, 255 * 0.777981f, 255 * 1.0f),
    float4(255 * 0.732897f, 255 * 0.918350f, 255 * 0.783574f, 255 * 1.0f),
    float4(255 * 0.725834f, 255 * 0.917737f, 255 * 0.788893f, 255 * 1.0f),
    float4(255 * 0.718537f, 255 * 0.916896f, 255 * 0.793938f, 255 * 1.0f),
    float4(255 * 0.711030f, 255 * 0.915828f, 255 * 0.798708f, 255 * 1.0f),
    float4(255 * 0.703300f, 255 * 0.914552f, 255 * 0.803212f, 255 * 1.0f),
    float4(255 * 0.695360f, 255 * 0.913054f, 255 * 0.807458f, 255 * 1.0f),
    float4(255 * 0.687217f, 255 * 0.911341f, 255 * 0.811442f, 255 * 1.0f),
    float4(255 * 0.678874f, 255 * 0.909414f, 255 * 0.815168f, 255 * 1.0f),
    float4(255 * 0.670351f, 255 * 0.907280f, 255 * 0.818643f, 255 * 1.0f),
    float4(255 * 0.661635f, 255 * 0.904933f, 255 * 0.821880f, 255 * 1.0f),
    float4(255 * 0.652735f, 255 * 0.902379f, 255 * 0.824863f, 255 * 1.0f),
    float4(255 * 0.643676f, 255 * 0.899624f, 255 * 0.827614f, 255 * 1.0f),
    float4(255 * 0.634464f, 255 * 0.896664f, 255 * 0.830135f, 255 * 1.0f),
    float4(255 * 0.625086f, 255 * 0.893500f, 255 * 0.832423f, 255 * 1.0f),
    float4(255 * 0.615567f, 255 * 0.890145f, 255 * 0.834491f, 255 * 1.0f),
    float4(255 * 0.605914f, 255 * 0.886598f, 255 * 0.836336f, 255 * 1.0f),
    float4(255 * 0.596145f, 255 * 0.882852f, 255 * 0.837970f, 255 * 1.0f),
    float4(255 * 0.586260f, 255 * 0.878925f, 255 * 0.839394f, 255 * 1.0f),
    float4(255 * 0.576278f, 255 * 0.874814f, 255 * 0.840613f, 255 * 1.0f),
    float4(255 * 0.566190f, 255 * 0.870520f, 255 * 0.841632f, 255 * 1.0f),
    float4(255 * 0.556024f, 255 * 0.866058f, 255 * 0.842458f, 255 * 1.0f),
    float4(255 * 0.545813f, 255 * 0.861420f, 255 * 0.843090f, 255 * 1.0f),
    float4(255 * 0.535527f, 255 * 0.856619f, 255 * 0.843538f, 255 * 1.0f),
    float4(255 * 0.525217f, 255 * 0.851658f, 255 * 0.843811f, 255 * 1.0f),
    float4(255 * 0.514877f, 255 * 0.846543f, 255 * 0.843909f, 255 * 1.0f),
    float4(255 * 0.504532f, 255 * 0.841286f, 255 * 0.843838f, 255 * 1.0f),
    float4(255 * 0.494180f, 255 * 0.835884f, 255 * 0.843605f, 255 * 1.0f),
    float4(255 * 0.483842f, 255 * 0.830350f, 255 * 0.843216f, 255 * 1.0f),
    float4(255 * 0.473543f, 255 * 0.824685f, 255 * 0.842677f, 255 * 1.0f),
    float4(255 * 0.463293f, 255 * 0.818902f, 255 * 0.841990f, 255 * 1.0f),
    float4(255 * 0.453115f, 255 * 0.813010f, 255 * 0.841160f, 255 * 1.0f),
    float4(255 * 0.443005f, 255 * 0.807018f, 255 * 0.840201f, 255 * 1.0f),
    float4(255 * 0.432982f, 255 * 0.800920f, 255 * 0.839108f, 255 * 1.0f),
    float4(255 * 0.423057f, 255 * 0.794738f, 255 * 0.837900f, 255 * 1.0f),
    float4(255 * 0.413269f, 255 * 0.788474f, 255 * 0.836571f, 255 * 1.0f),
    float4(255 * 0.403599f, 255 * 0.782136f, 255 * 0.835134f, 255 * 1.0f),
    float4(255 * 0.394062f, 255 * 0.775727f, 255 * 0.833595f, 255 * 1.0f),
    float4(255 * 0.384684f, 255 * 0.769261f, 255 * 0.831959f, 255 * 1.0f),
    float4(255 * 0.375472f, 255 * 0.762745f, 255 * 0.830227f, 255 * 1.0f),
    float4(255 * 0.366446f, 255 * 0.756186f, 255 * 0.828409f, 255 * 1.0f),
    float4(255 * 0.357593f, 255 * 0.749581f, 255 * 0.826514f, 255 * 1.0f),
    float4(255 * 0.348916f, 255 * 0.742958f, 255 * 0.824540f, 255 * 1.0f),
    float4(255 * 0.340447f, 255 * 0.736291f, 255 * 0.822504f, 255 * 1.0f),
    float4(255 * 0.332185f, 255 * 0.729618f, 255 * 0.820394f, 255 * 1.0f),
    float4(255 * 0.324113f, 255 * 0.722919f, 255 * 0.818230f, 255 * 1.0f),
    float4(255 * 0.316282f, 255 * 0.716224f, 255 * 0.816018f, 255 * 1.0f),
    float4(255 * 0.308653f, 255 * 0.709514f, 255 * 0.813746f, 255 * 1.0f),
    float4(255 * 0.301225f, 255 * 0.702804f, 255 * 0.811437f, 255 * 1.0f),
    float4(255 * 0.294036f, 255 * 0.696099f, 255 * 0.809086f, 255 * 1.0f),
    float4(255 * 0.287067f, 255 * 0.689401f, 255 * 0.806696f, 255 * 1.0f),
    float4(255 * 0.280322f, 255 * 0.682707f, 255 * 0.804272f, 255 * 1.0f),
    float4(255 * 0.273816f, 255 * 0.676034f, 255 * 0.801816f, 255 * 1.0f),
    float4(255 * 0.267484f, 255 * 0.669377f, 255 * 0.799343f, 255 * 1.0f),
    float4(255 * 0.261414f, 255 * 0.662739f, 255 * 0.796836f, 255 * 1.0f),
    float4(255 * 0.255543f, 255 * 0.656120f, 255 * 0.794320f, 255 * 1.0f),
    float4(255 * 0.249860f, 255 * 0.649522f, 255 * 0.791778f, 255 * 1.0f),
    float4(255 * 0.244403f, 255 * 0.642944f, 255 * 0.789229f, 255 * 1.0f),
    float4(255 * 0.239162f, 255 * 0.636402f, 255 * 0.786665f, 255 * 1.0f),
    float4(255 * 0.234103f, 255 * 0.629874f, 255 * 0.784090f, 255 * 1.0f),
    float4(255 * 0.229233f, 255 * 0.623385f, 255 * 0.781503f, 255 * 1.0f),
    float4(255 * 0.224530f, 255 * 0.616915f, 255 * 0.778909f, 255 * 1.0f),
    float4(255 * 0.220062f, 255 * 0.610472f, 255 * 0.776315f, 255 * 1.0f),
    float4(255 * 0.215727f, 255 * 0.604065f, 255 * 0.773710f, 255 * 1.0f),
    float4(255 * 0.211566f, 255 * 0.597675f, 255 * 0.771114f, 255 * 1.0f),
    float4(255 * 0.207553f, 255 * 0.591317f, 255 * 0.768502f, 255 * 1.0f),
    float4(255 * 0.203709f, 255 * 0.584989f, 255 * 0.765902f, 255 * 1.0f),
    float4(255 * 0.199968f, 255 * 0.578679f, 255 * 0.763292f, 255 * 1.0f),
    float4(255 * 0.196442f, 255 * 0.572403f, 255 * 0.760691f, 255 * 1.0f),
    float4(255 * 0.192988f, 255 * 0.566143f, 255 * 0.758086f, 255 * 1.0f),
    float4(255 * 0.189677f, 255 * 0.559913f, 255 * 0.755482f, 255 * 1.0f),
    float4(255 * 0.186487f, 255 * 0.553693f, 255 * 0.752873f, 255 * 1.0f),
    float4(255 * 0.183398f, 255 * 0.547501f, 255 * 0.750276f, 255 * 1.0f),
    float4(255 * 0.180424f, 255 * 0.541321f, 255 * 0.747679f, 255 * 1.0f),
    float4(255 * 0.177586f, 255 * 0.535164f, 255 * 0.745074f, 255 * 1.0f),
    float4(255 * 0.174797f, 255 * 0.529026f, 255 * 0.742478f, 255 * 1.0f),
    float4(255 * 0.172082f, 255 * 0.522885f, 255 * 0.739880f, 255 * 1.0f),
    float4(255 * 0.169502f, 255 * 0.516755f, 255 * 0.737273f, 255 * 1.0f),
    float4(255 * 0.166959f, 255 * 0.510628f, 255 * 0.734673f, 255 * 1.0f),
    float4(255 * 0.164485f, 255 * 0.504518f, 255 * 0.732066f, 255 * 1.0f),
    float4(255 * 0.162089f, 255 * 0.498397f, 255 * 0.729453f, 255 * 1.0f),
    float4(255 * 0.159699f, 255 * 0.492262f, 255 * 0.726836f, 255 * 1.0f),
    float4(255 * 0.157413f, 255 * 0.486128f, 255 * 0.724215f, 255 * 1.0f),
    float4(255 * 0.155180f, 255 * 0.479992f, 255 * 0.721583f, 255 * 1.0f),
    float4(255 * 0.152960f, 255 * 0.473828f, 255 * 0.718948f, 255 * 1.0f),
    float4(255 * 0.150805f, 255 * 0.467661f, 255 * 0.716306f, 255 * 1.0f),
    float4(255 * 0.148654f, 255 * 0.461471f, 255 * 0.713644f, 255 * 1.0f),
    float4(255 * 0.146549f, 255 * 0.455260f, 255 * 0.710977f, 255 * 1.0f),
    float4(255 * 0.144488f, 255 * 0.449025f, 255 * 0.708292f, 255 * 1.0f),
    float4(255 * 0.142409f, 255 * 0.442760f, 255 * 0.705595f, 255 * 1.0f),
    float4(255 * 0.140344f, 255 * 0.436466f, 255 * 0.702886f, 255 * 1.0f),
    float4(255 * 0.138310f, 255 * 0.430142f, 255 * 0.700156f, 255 * 1.0f),
    float4(255 * 0.136210f, 255 * 0.423782f, 255 * 0.697413f, 255 * 1.0f),
    float4(255 * 0.134205f, 255 * 0.417407f, 255 * 0.694652f, 255 * 1.0f),
    float4(255 * 0.132133f, 255 * 0.410984f, 255 * 0.691884f, 255 * 1.0f),
    float4(255 * 0.130086f, 255 * 0.404521f, 255 * 0.689094f, 255 * 1.0f),
    float4(255 * 0.127967f, 255 * 0.398042f, 255 * 0.686279f, 255 * 1.0f),
    float4(255 * 0.125859f, 255 * 0.391517f, 255 * 0.683451f, 255 * 1.0f),
    float4(255 * 0.123663f, 255 * 0.384945f, 255 * 0.680600f, 255 * 1.0f),
    float4(255 * 0.121475f, 255 * 0.378353f, 255 * 0.677747f, 255 * 1.0f),
    float4(255 * 0.119286f, 255 * 0.371714f, 255 * 0.674860f, 255 * 1.0f),
    float4(255 * 0.117003f, 255 * 0.365049f, 255 * 0.671962f, 255 * 1.0f),
    float4(255 * 0.114652f, 255 * 0.358343f, 255 * 0.669046f, 255 * 1.0f),
    float4(255 * 0.112324f, 255 * 0.351597f, 255 * 0.666107f, 255 * 1.0f),
    float4(255 * 0.109890f, 255 * 0.344819f, 255 * 0.663159f, 255 * 1.0f),
    float4(255 * 0.107324f, 255 * 0.337994f, 255 * 0.660182f, 255 * 1.0f),
    float4(255 * 0.104641f, 255 * 0.331130f, 255 * 0.657195f, 255 * 1.0f),
    float4(255 * 0.101951f, 255 * 0.324237f, 255 * 0.654180f, 255 * 1.0f),
    float4(255 * 0.099119f, 255 * 0.317305f, 255 * 0.651154f, 255 * 1.0f),
    float4(255 * 0.096135f, 255 * 0.310338f, 255 * 0.648101f, 255 * 1.0f),
    float4(255 * 0.093031f, 255 * 0.303295f, 255 * 0.645033f, 255 * 1.0f),
    float4(255 * 0.089832f, 255 * 0.296240f, 255 * 0.641950f, 255 * 1.0f),
    float4(255 * 0.086378f, 255 * 0.289140f, 255 * 0.638844f, 255 * 1.0f),
    float4(255 * 0.082771f, 255 * 0.281987f, 255 * 0.635717f, 255 * 1.0f),
    float4(255 * 0.078888f, 255 * 0.274774f, 255 * 0.632572f, 255 * 1.0f),
    float4(255 * 0.074823f, 255 * 0.267513f, 255 * 0.629402f, 255 * 1.0f),
    float4(255 * 0.070429f, 255 * 0.260237f, 255 * 0.626217f, 255 * 1.0f),
    float4(255 * 0.065707f, 255 * 0.252891f, 255 * 0.623014f, 255 * 1.0f),
    float4(255 * 0.060588f, 255 * 0.245475f, 255 * 0.619791f, 255 * 1.0f),
    float4(255 * 0.054957f, 255 * 0.238038f, 255 * 0.616544f, 255 * 1.0f),
    float4(255 * 0.048861f, 255 * 0.230521f, 255 * 0.613271f, 255 * 1.0f),
    float4(255 * 0.041963f, 255 * 0.222980f, 255 * 0.609992f, 255 * 1.0f),
    float4(255 * 0.034076f, 255 * 0.215343f, 255 * 0.606696f, 255 * 1.0f),
    float4(255 * 0.026246f, 255 * 0.207675f, 255 * 0.603381f, 255 * 1.0f),
    float4(255 * 0.018222f, 255 * 0.199913f, 255 * 0.600048f, 255 * 1.0f),
    float4(255 * 0.009824f, 255 * 0.192129f, 255 * 0.596704f, 255 * 1.0f),
};

float4 Palette(float v)
{
	float l = (v) * (PaletteCount - 1);
	uint  i = l;
	float f = l - i;

	float4 a = PaletteColors[min(i + 0, PaletteCount - 1)] / 255.0f;
	float4 b = PaletteColors[min(i + 1, PaletteCount - 1)] / 255.0f;

	float m = sqrt(dot(a.xyz, a.xyz));
	float n = sqrt(dot(b.xyz, b.xyz));

	float4 result = a * (1.0f - f) + b * (f);
	float4 renorm = m * (1.0f - f) + n * (f);
	
	float r = sqrt(dot(result.xyz, result.xyz));

	return result * (renorm / r);
}

float4 mainPS(VERTEX Input, float4 pos : SV_Position) : SV_Target
{
    uint2 pixelPos = (uint2)pos.xy;

    uint3 value = DebugBuffer[pixelPos].xxx;
    float3 vs = asfloat(value);

    if (showBins) {
        // 16 is normalization value of UNORM buffer
        // 14 is upper value of bins [0,14] => 15 bins
        vs = saturate(asfloat(value) * 16.0f / 14.0f);
    
        if (asfloat(value.x) != 1.0f) {
            vs.xyz = Palette(vs.x);
        }
        else {
            vs.xyz = 0;
        }
    }
    
    return float4(vs, 1.0f);
}
